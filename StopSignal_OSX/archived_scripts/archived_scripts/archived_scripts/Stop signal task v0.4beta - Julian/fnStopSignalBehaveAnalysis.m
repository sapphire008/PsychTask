function fnStopSignalBehaveAnalysis(filename,num_steps)%%%%% Stopbehav Tracking Version analysis program%%%% works with stopbehavOSX and stopfmriOSX%%%%% Must load desired program first%%%%% for use with stopsig_new (JRC 7/25/07)--this version a function to%%%%% run all subs at once%%%%% Updated 12-6-08 to fix calculations and use quantile%% Changelog:%   7/17/2013:  Start edit by Julian Y. Cheng.%   7/19/2013:  Changed output behavior. Now writes to the same directory%               as the behave run script and uses same naming convention.%               Improved how correct responses are checked. Now writes to%               CSV instead of TXT.%%% Use below if trouble shooting not as a function (DEPRICATED)% filename=input('Enter filename: ','s');	% num_steps=input('How many steps of the ladder do you want included in the SSRT estimation? 8 is half the run, 16 is entire run: ');% analyze=input('Is this to put the data in the behavioral spreadsheet? 1 if yes, 0 if no: ');% while isempty(find(analyze==[0 1])),%     analyze=input('Must enter 1 or 0 - please re-enter: ');% end;analyze=1;addpath('.\Code\')%check if input request is neededif (nargin == 0)    intSubject = input('Enter the subject number: ');        while ~isnumeric(intSubject)        intSubject = input('Invalid subject number, re-enter: ');    end        %find the files    lstInfiles = fnGetFileList('.\Behave data\');    lstSubjects = regexpi(lstInfiles,'(?<=\w)\d*(?=_.*\.mat)','match');    lstInfiles(cellfun('isempty',lstSubjects)) = [];    %delete non-matching files    lstSubjects(cellfun('isempty',lstSubjects)) = [];   %delete empty entries    arrSubjects = cellfun(@(x) str2double(cell2mat(x)),lstSubjects);    arrSubjectIndexes = arrSubjects == intSubject;        if (sum(arrSubjectIndexes) == 0), error('Failed to find subject %i', intSubject);    elseif (sum(arrSubjectIndexes) == 1), filename = lstInfiles{arrSubjectIndexes};    else        intRun = input('Enter the run number: ');            while ~isnumeric(intRun)            intRun = input('Invalid run number, re-enter: ');        end                lstInfiles(~arrSubjectIndexes) = [];                idxRun = find(~cellfun('isempty',regexpi(lstInfiles,['-',num2str(intRun)])));                if isempty(idxRun), error('Failed to find run %i', intRun);        else filename = lstInfiles{idxRun}; end    end    clear intSubject lstInfiles lstSubjects arrSubjects arrSubjectIndexes intRun idxRunendif (nargin < 2)    fprintf(['The number of ladder steps used in the SRRT estimation determines\n' ...             'the portion of the task used. If the value is 8 then only the first\n' ...             'half of the task is used; if the value is 16 then the entire task\n' ...             'is used.\n'            ]);    num_steps = input('Enter the number of steps: ');        while ~any(num_steps == 1:16)        num_steps = input('Invalid step number, re-enter: ');    endendload(fullfile('.\Behave data\',filename));tmp = zeros(256,16);tmp(1:256,:)=Seeker;clear Seeker,Seeker = tmp;if exist('scannum', 'var'), IS_FMRI = true;else IS_FMRI = false; end%define response key mappingsLEFT = [ ...         %response mapping for left response    KbName(',<') ...    KbName('left') ...    KbName('1!') ...    KbName('1') ...    ];RIGHT = [ ...         %response mapping for right response    KbName('.>') ...    KbName('right') ...    KbName('2@') ...    KbName('2') ...    ];% Determine which keys to count as correct% if ~isempty(find(Seeker(:,7)==197, 1)),%     LEFT = 197;% elseif ~isempty(find(Seeker(:,7)==5, 1)),%     LEFT = 5;% elseif ~isempty(find(Seeker(:,7)==89, 1)),%     LEFT = 89;% elseif ~isempty(find(Seeker(:,7) == 188, 1))%     LEFT = 188;% else%     LEFT=input('What is the ASCII key code the subject pushed for left? ');% end;% if ~isempty(find(Seeker(:,7)==198, 1)),%     RIGHT = 198;% elseif ~isempty(find(Seeker(:,7)==28, 1)),%     RIGHT = 28;% elseif ~isempty(find(Seeker(:,7)==90, 1)),%     RIGHT = 90;% elseif ~isempty(find(Seeker(:,7) == 190, 1))%     LEFT = 190;% else%     RIGHT=input('What is the ASCII key code the subject pushed for right? ');% end;arrLeftResponses = ismember(LEFT,Seeker(:,7));arrRightResponses = ismember(RIGHT,Seeker(:,7));if sum(arrLeftResponses) > 1    fprintf('Warning: more than 1 valid response key found in-use for LEFT\n')elseif sum(arrLeftResponses) == 0    fprintf('\nFailed to detect valid LEFT responses with default key mapping\n\n')        while (sum(ismember(LEFT,Seeker(:,7))) == 0)        LEFT = input('Enter key code used for LEFT response (integer value):');    endendif sum(arrRightResponses) > 1    fprintf('Warning: more than 1 valid response key found in-use for RIGHT\n')elseif sum(arrRightResponses) == 0    fprintf('\nFailed to detect valid RIGHT responses with default key mapping\n\n')        while (sum(ismember(RIGHT,Seeker(:,7))) == 0)        RIGHT = input('Enter key code used for RIGHT response (integer value):');    endendfprintf('\n----------------------------------------------\n\n')%%%% Make SSD graphsa = max(Ladder1);b = max(Ladder2);ymax=max([a b]);a = min(Ladder1);b = min(Ladder2);ymin=min([a b]);if ymin>0,    ymin=0;end;xmax=length(Ladder1)+1;for a=1:size(Ladder1),    Ladder1Plot(2*a-1)=Ladder1(a);    Ladder2Plot(2*a-1)=Ladder2(a);    Ladder1Plot(2*a)=Ladder1(a);    Ladder2Plot(2*a)=Ladder2(a);end;subplot(2,2,1);for a=1:size(Ladder1)-1;    hold on;    plot(a:a+1,Ladder1Plot(2*a-1:2*a), 'b');    plot([a+1 a+1],Ladder1Plot(2*a:2*a+1), 'b');end;axis([1 xmax ymin ymax]),title('Block 1');subplot(2,2,2);for a=1:size(Ladder2)-1;    hold on;    plot(a:a+1,Ladder2Plot(2*a-1:2*a), 'b');    plot([a+1 a+1],Ladder2Plot(2*a:2*a+1), 'b');end;axis([1 xmax ymin ymax]),title('Block 2');%%%% Actual Analysis...% Note this only uses GRT from last half of run if only use 8 steps of% ladder, and uses GRT from entire run if use all 16 stepsGRTmedian=median(Seeker(Seeker(:,1)>(16-num_steps)*16 & Seeker(:,3)==0 & ((Seeker(:,4)==0 & ismember(Seeker(:,7),LEFT)) | (Seeker(:,4)==1 & ismember(Seeker(:,7),RIGHT))),9))*1000;GRTmean=mean(Seeker(Seeker(:,1)>(16-num_steps)*16 & Seeker(:,3)==0 & ((Seeker(:,4)==0 & ismember(Seeker(:,7),LEFT)) | (Seeker(:,4)==1 & ismember(Seeker(:,7),RIGHT))),9))*1000;StDevGRT=std(Seeker(Seeker(:,1)>(16-num_steps)*16 & Seeker(:,3)==0 & ((Seeker(:,4)==0 & ismember(Seeker(:,7),LEFT)) | (Seeker(:,4)==1 & ismember(Seeker(:,7),RIGHT))),9))*1000;% look at last X steps of ladder, subtract 1 because want to include actual% SSDs on each trial, and if don't -1 then includes what the next SSD will beBOTT=length(Ladder1)-num_steps+1-1; TOP=length(Ladder1)-1;if IS_FMRI    if subject_code<11 && scannum==2, % because took wrong starting value for these 10 subjects        tmpLadd1=Seeker(Seeker(:,5)==1,6);        Ladder1mean=mean([tmpLadd1(1) Ladder1(BOTT+1:TOP)']);        tmpLadd2=Seeker(Seeker(:,5)==2,6);        Ladder2mean=mean([tmpLadd2(1) Ladder2(BOTT+1:TOP)']);    else        Ladder1mean=mean(Ladder1(BOTT:TOP));        Ladder2mean=mean(Ladder2(BOTT:TOP));    end;else    Ladder1mean=mean(Ladder1(BOTT:TOP));    Ladder2mean=mean(Ladder2(BOTT:TOP));end;SSDfifty=mean([Ladder1mean Ladder2mean]);SSRT=GRTmedian-SSDfifty;% Percent Inhibition from bottom to top (so last X steps); do separately% for each ladder and then averagefor ladder=1:2,    tmp=Seeker(Seeker(:,5)==ladder,7);    tmp2=tmp(length(tmp)-num_steps+1:length(tmp)); % last X steps of ladder    PctInhib(ladder)=100*sum(tmp2(:)==0)/length(tmp2);end;% Checks to make sure doing task appropriately across entire runPctDimErrors=100*sum((Seeker(:,3)==0 & ((Seeker(:,4)==0 & ismember(Seeker(:,7),RIGHT)) | (Seeker(:,4)==1 & ismember(Seeker(:,7),LEFT)))))/sum(Seeker(:,3)==0);PctGoResp=100*(sum(Seeker(:,3)==0 & Seeker(:,7) ~= 0) / sum(Seeker(:,3)==0));%Analysis to get SSRT using quantile based on actual PctInhib as opposed to assuming 50% like abovecorr_rt=Seeker(Seeker(:,1)>(16-num_steps)*16 & Seeker(:,3)==0 & ((Seeker(:,4)==0 & ismember(Seeker(:,7),LEFT)) | (Seeker(:,4)==1 & ismember(Seeker(:,7),RIGHT))),9)*1000;GRTquant=quantile(corr_rt,mean(100-PctInhib)/100);SSRTquant=GRTquant-SSDfifty;% Calculates number of TRs until task actually ended      % Last trial starts + Last trial duration + Last null duration     % Divide by 2 to get TRs, and round to nearest whole numbernumTRs=ceil((Seeker(255,12)+Seeker(255,15) + Seeker(256,15))/2);fprintf('Median Go Reaction Time at 50 pct inhib(ms): %f\n',GRTmedian);fprintf('Median Go Reaction Time at %0.2f pct inhib (ms): %f\n',mean(PctInhib),GRTquant);fprintf('StDev Go Reaction Time: %f\n',StDevGRT);fprintf('Mean SSD Ladder 1 (ms): %f\n',Ladder1mean);fprintf('Mean SSD Ladder 2 (ms): %f\n',Ladder2mean);fprintf('Subject mean SSD (ms): %f\n', SSDfifty);fprintf('Percent discrimination errors: %f\n',PctDimErrors);fprintf('Percent responding on go trials: %f\n',PctGoResp);fprintf('Subject SSRT assuming 50 Pct inhib (ms): %f\n', SSRT);fprintf('Subject SSRT using actual (%0.2f) Pct inhib (ms): %f\n',mean(PctInhib),SSRTquant);fprintf('Percent Inhibition Ladder 1: %0.1f\n',PctInhib(1));fprintf('Percent Inhibition Ladder 2: %0.1f\n',PctInhib(2));% Print relevant output to a text fileif analyze==1,    strFilePrefix = cell2mat(regexpi(filename,'.*(?=-.*\.mat)','match'));    if IS_FMRI        error('Use of this script for fMRI data is depricated, file not saved')    else        fid=fopen(fullfile('.\Behave data\',[strFilePrefix,'-step',num2str(num_steps),'.csv']),'a');    end;        %print info    fprintf(fid,'Source:,%s\n',filename);        %DEPRICATED%     if IS_FMRI%         fprintf(fid,'MRI Data\t');%     else%         fprintf(fid,'Behav Data\t');%     end;    %print header    arrHeader = { ...        'Median Go RT @ 50% inhib (ms)' ...        sprintf('Median Go RT @ %.2f%% inhib (ms)', mean(PctInhib)) ...        'StDev Go RT (ms)' ...        'Mean SSD Ladder 1 (ms)' ...        'Mean SSD Ladder 2 (ms)' ...        'Subject mean SSD (ms)' ...        'Discrimination errors (%)' ...        'Go trial response (%)' ...        'SSRT @ 50% inhib (ms)' ...        sprintf('SSRT @ %.2f%% inhib (ms)', mean(PctInhib)) ...        'Ladder 1 inhib (%)' ...        'Ladder 2 inhib (%)' ...        'TR count' ...        };    fprintf(fid,'%s,',arrHeader{1:end-1});    fprintf(fid,'%s\n', arrHeader{end});    fprintf(fid,'%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%0.2f,%0.2f,%0.1f,%0.1f,%0.1f,%0.1f,%0.1f,%d\n\n',GRTmedian, GRTquant, StDevGRT, Ladder1mean, Ladder2mean, SSDfifty, PctDimErrors, PctGoResp, SSRT, SSRTquant, PctInhib(1), PctInhib(2),numTRs);    %fprintf('%0.1f\t%0.1f\t%0.1f\t%0.1f\t%0.1f\t%0.2f\t%0.2f\t%0.1f\t%0.1f\t%0.1f\t%0.1f\t',GRTmedian, GRTquant, Ladder1mean, Ladder2mean, SSDfifty, PctDimErrors, PctGoResp, SSRT, SSRTquant, PctInhib);    %DEPRICATED%     if IS_FMRI  %         if scannum==2,%             fprintf(fid,'\n');%         end;%     elseif run_num==3,%         fprintf(fid,'\n');%     end;    fclose(fid);end;