function [answer,RT] = doTrial_surround_fMRI(display,trial,fix,params)answer = NaN;backgroundColor = findName(display.reservedColor,'background');for eventNum = 1:size(trial,1)    material = trial{eventNum,2}; % The stuff to act upon for any given event    switch trial{eventNum,1}        case 'stimulusEvent',            if fix.insertfix == 1                material.stimulus.image = insertFix_surround_fMRI(display, material.stimulus.image, fix);            end            material.stimulus.texture = Screen('MakeTexture',display.windowPtr, double(material.stimulus.image));            showStimulus_OSX(display,material.stimulus,params,[],0);        case 'ISIEvent'            if isfield(material,'stimulus')                showStimulus_OSX(display,material.stimulus,params,[],0);                if isfield(material,'duration')                    waitTill_OSX(material.duration,display);                end            elseif isfield(material,'duration')                waitTill_OSX(material.duration,display);            else                error('ISI has to have at least a duration or stimulus field!');            end        case 'soundEvent',            if isfield(material, 'sampRate')                sound(material.sound, material.sampRate);            else                sound(material.sound);            end        case 'responseEvent',           % if ~isfield(display,'forpnum') %no forp           if isempty(display.forpnum) %no forp                %if ~isfield(display,'keypaddevnum') %no key pad                if isempty(display.keypaddevnum) %no key pad                    devnum = display.keyboarddevnum;                else                    devnum = display.keypaddevnum;                end            else                devnum = display.forpnum;            end            if isfield(material,'stimulus')  % There's a stimulus to show during the response period                showStimulus_OSX(display,material.stimulus,0);            end            startrespinterval = GetSecs;            RT = NaN; a = 0; keyHit = '';            while ((GetSecs < (startrespinterval + material.duration)) & a == 0)                WaitSecs(.001);                [a,b,keycode] = PsychHID('KbCheck',display.keyboarddevnum);                if keycode('t') %this prevents TTL pulses from being registered as responses                    a = 0;                end             end            if a ~= 0 %some kind of keypress                RT = b - startrespinterval;                keyHit = KbName(find(keycode));%                 if ~isempty(display.keypaddevnum) %there is a key pad%                     if length(keyHit) == 2 %%                         keyHit = keyHit{2};%                     end%                 end                if strcmp(display.computerName, 'jong_laptop') | devnum == display.forpnum                    keyHit = keyHit(1);                end            end            while (GetSecs < (startrespinterval + material.duration))            end            try                responseIndex = findstr(material.responseSet, keyHit); % Find which response was made            catch                responseIndex = [];            end            if ~isempty(responseIndex)	% valid response (in responseSet)                if responseIndex == 1                    answer = 1; % Default answerType is binary                else                    answer = 0;                end            end        case 'soundFeedbackEvent',            if ~exist('responseIndex','var')                feedbackSound = material.noResponseSound;            elseif isnan(responseIndex)                feedbackSound = material.noResponseSound;            elseif isempty(responseIndex)                feedbackSound = material.incorrectResponseSound;            else                feedbackSound = material.correctResponseSound{responseIndex};            end            %sound(feedbackSound);            Snd('Play',feedbackSound,8000);        otherwise,            error([trial{eventNum,1} ' is not a valid event type.']);    endend