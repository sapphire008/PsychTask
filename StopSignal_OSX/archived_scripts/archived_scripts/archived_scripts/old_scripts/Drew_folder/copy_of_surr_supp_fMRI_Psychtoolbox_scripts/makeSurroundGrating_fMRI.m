function finalimg = makeSurroundGrating_fMRI(display,params,location,contrast)% 1 through 8 possible locations for no surround, 9 is target-absent/no surround% 10 through 17 are possible locations for surround, 18 is target-absent/surround% 19 through 26 are possible locations for orthogonal surround, 27 is target-absent/orthogonal surround%first make big gratingouter = angle2pix(display, params.surroundSize(2));% [x,y] is a mesh grid in visual angle coordinates; top/left are negative,% bottom/right are positivepersistent xx x y r circmask surroundmask lastouter emptyimgif isempty(lastouter) || ~(outer == lastouter)    xx = linspace(-params.surroundSize(2), params.surroundSize(2), (outer * 2));    [x, y] = meshgrid(xx);    r = sqrt(x.^2 + y.^2);    circmask = (r < params.size(2)) & (r > params.size(1));    surroundmask = (r > params.size(2)) & (r < params.surroundSize(2)) | (r < params.size(1)) & (r > params.surroundSize(1));    %surroundmask = (r > params.size(2)) & (r < params.surroundSize) | (r < params.size(1));    emptyimg = zeros(size(x));    lastouter = outer;endif     mod(location,9) == 0, angmask = emptyimg & 0;                 %target absentelseif mod(location,9) == 1, angmask = circmask & (x>0) & (y+x<0);   %12:00 to  1:30 on a clockelseif mod(location,9) == 2, angmask = circmask & (y<0) & (y+x>0);   % 1:30 to  3:00elseif mod(location,9) == 3, angmask = circmask & (y>0) & (y-x<0);   % 3:00 to  4:30elseif mod(location,9) == 4, angmask = circmask & (x>0) & (y-x>0);   % 4:30 to  6:00elseif mod(location,9) == 5, angmask = circmask & (x<0) & (y+x>0);   % 6:00 to  7:30elseif mod(location,9) == 6, angmask = circmask & (y>0) & (y+x<0);   % 7:30 to  9:00elseif mod(location,9) == 7, angmask = circmask & (y<0) & (y-x>0);   % 9:00 to 10:30elseif mod(location,9) == 8, angmask = circmask & (x<0) & (y-x<0);   %10:30 to 12:00end%img = sin((2 * pi * params.spatialFrequency .* x) + params.spatialPhase);img = repmat(sin((2 * pi * params.spatialFrequency .* x(1,:)) + params.spatialPhase), length(x), 1);%if location > 9 && location < 19 %parallel surround%    surround = img .* surroundmask;%elseif location >= 19 %orthogonal surround%    surround = sin((2 * pi * params.spatialFrequency .* y) + params.spatialPhase) .* surroundmask;%else%    surround = zeros(length(xx),length(xx));%enddistractormask = circmask & ~angmask;% This hold contrast constant for target segment and adaptively varies the% other seven segments%distractor = img .* contrast .* distractormask;%target = img .*  params.pedestalContrast .* angmask;% This holds contrast constant for seven of eight segments and adaptively% varies target segment %distractor = img .* params.pedestalContrast .* distractormask;%target = img .* contrast .* angmask;%finalimg = surround + distractor + target;finalimg = emptyimg;finalimg(angmask) = img(angmask) * contrast;if contrast == -1 %surround only    params.pedestalContrast = 0;endfinalimg(distractormask) = img(distractormask) * params.pedestalContrast;if location > 9 && location < 19 %parallel surround    finalimg(surroundmask) = img(surroundmask);elseif location >= 19 %orthogonal surround    rotimg = img';    finalimg(surroundmask) = rotimg(surroundmask);else    surround = emptyimg;end   %oinds = find(finalimg == 0);oinds = finalimg==0;lowResColor = max([display.reservedColor.fbVal])+1;finalimg = (display.numColors - lowResColor - 1) / 2 * (finalimg + 1) + lowResColor;finalimg(oinds) = 0;% figure% imagesc(finalimg);% colormap(gray)% axis square